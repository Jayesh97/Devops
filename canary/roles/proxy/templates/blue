Transform {
  _readableState: ReadableState {
    objectMode: false,
    highWaterMark: 16384,
    buffer: BufferList { head: null, tail: null, length: 0 },
    length: 0,
    pipes: null,
    pipesCount: 0,
    flowing: false,
    ended: true,
    endEmitted: true,
    reading: false,
    sync: false,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    emitClose: true,
    autoDestroy: false,
    destroyed: false,
    defaultEncoding: 'utf8',
    awaitDrain: 0,
    readingMore: false,
    decoder: null,
    encoding: null,
    [Symbol(kPaused)]: false
  },
  readable: false,
  _events: [Object: null prototype] {
    prefinish: [Function: prefinish],
    close: [
      [Function],
      [Function: onclose],
      [Function],
      [Function: onclose]
    ],
    end: [ [Function: onend], [Function: onend] ],
    finish: [ [Function: onfinish], [Function: onfinish] ],
    error: [ [Function: onerror], [Function: onerror] ],
    aborted: [Function: onclose]
  },
  _eventsCount: 6,
  _maxListeners: undefined,
  _writableState: WritableState {
    objectMode: false,
    highWaterMark: 16384,
    finalCalled: false,
    needDrain: false,
    ending: true,
    ended: true,
    finished: true,
    destroyed: false,
    decodeStrings: true,
    defaultEncoding: 'utf8',
    length: 0,
    writing: false,
    corked: 0,
    sync: false,
    bufferProcessing: false,
    onwrite: [Function: bound onwrite],
    writecb: null,
    writelen: 0,
    afterWriteTickInfo: null,
    bufferedRequest: null,
    lastBufferedRequest: null,
    pendingcb: 0,
    prefinished: true,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: false,
    bufferedRequestCount: 0,
    corkedRequestsFree: {
      next: null,
      entry: null,
      finish: [Function: bound onCorkedFinish]
    }
  },
  writable: false,
  allowHalfOpen: true,
  _transformState: {
    afterTransform: [Function: bound afterTransform],
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: 'buffer'
  },
  _transform: [Function: transform],
  _flush: [Function: flush],
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: onReadableStreamEnd],
      free: [Function: onFree],
      close: [Array],
      agentRemove: [Function: onRemove],
      error: [Function: socketErrorListener],
      finish: [Function]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: true,
      needDrain: false,
      ending: true,
      ended: true,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 1,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: false,
    allowHalfOpen: false,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: null,
    _server: null,
    parser: null,
    _httpMessage: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 9,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Circular],
      connection: [Circular],
      _header: 'POST /preview HTTP/1.1\r\n' +
        'user-agent: got (https://github.com/sindresorhus/got)\r\n' +
        'content-type: application/json\r\n' +
        'content-length: 1271\r\n' +
        'accept-encoding: gzip, deflate, br\r\n' +
        'Host: 192.168.44.25:3000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _onPendingData: [Function: noopPendingOutput],
      agent: [Agent],
      socketPath: undefined,
      method: 'POST',
      insecureHTTPParser: undefined,
      path: '/preview',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      timings: [Object],
      emit: [Function],
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(reentry)]: true
    },
    _peername: { address: '192.168.44.25', family: 'IPv4', port: 3000 },
    [Symbol(asyncId)]: 22,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      [Symbol(owner)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: onReadableStreamEnd],
      free: [Function: onFree],
      close: [Array],
      agentRemove: [Function: onRemove],
      error: [Function: socketErrorListener],
      finish: [Function]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: true,
      needDrain: false,
      ending: true,
      ended: true,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 1,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: false,
    allowHalfOpen: false,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: null,
    _server: null,
    parser: null,
    _httpMessage: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 9,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Circular],
      connection: [Circular],
      _header: 'POST /preview HTTP/1.1\r\n' +
        'user-agent: got (https://github.com/sindresorhus/got)\r\n' +
        'content-type: application/json\r\n' +
        'content-length: 1271\r\n' +
        'accept-encoding: gzip, deflate, br\r\n' +
        'Host: 192.168.44.25:3000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _onPendingData: [Function: noopPendingOutput],
      agent: [Agent],
      socketPath: undefined,
      method: 'POST',
      insecureHTTPParser: undefined,
      path: '/preview',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      timings: [Object],
      emit: [Function],
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(reentry)]: true
    },
    _peername: { address: '192.168.44.25', family: 'IPv4', port: 3000 },
    [Symbol(asyncId)]: 22,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      [Symbol(owner)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: {
    'x-powered-by': 'Express',
    'content-type': 'application/json; charset=utf-8',
    'content-length': '5475',
    etag: 'W/"1563-1Lgum/IKKiqJY2sRnvFYFA"',
    date: 'Tue, 28 Apr 2020 13:06:46 GMT',
    connection: 'close'
  },
  rawHeaders: [
    'X-Powered-By',
    'Express',
    'Content-Type',
    'application/json; charset=utf-8',
    'Content-Length',
    '5475',
    'ETag',
    'W/"1563-1Lgum/IKKiqJY2sRnvFYFA"',
    'Date',
    'Tue, 28 Apr 2020 13:06:46 GMT',
    'Connection',
    'close'
  ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: 'http://192.168.44.25:3000/preview',
  method: null,
  statusCode: 200,
  statusMessage: 'OK',
  client: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: onReadableStreamEnd],
      free: [Function: onFree],
      close: [Array],
      agentRemove: [Function: onRemove],
      error: [Function: socketErrorListener],
      finish: [Function]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: true,
      needDrain: false,
      ending: true,
      ended: true,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 1,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: false,
    allowHalfOpen: false,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: null,
    _server: null,
    parser: null,
    _httpMessage: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 9,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Circular],
      connection: [Circular],
      _header: 'POST /preview HTTP/1.1\r\n' +
        'user-agent: got (https://github.com/sindresorhus/got)\r\n' +
        'content-type: application/json\r\n' +
        'content-length: 1271\r\n' +
        'accept-encoding: gzip, deflate, br\r\n' +
        'Host: 192.168.44.25:3000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _onPendingData: [Function: noopPendingOutput],
      agent: [Agent],
      socketPath: undefined,
      method: 'POST',
      insecureHTTPParser: undefined,
      path: '/preview',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      timings: [Object],
      emit: [Function],
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(reentry)]: true
    },
    _peername: { address: '192.168.44.25', family: 'IPv4', port: 3000 },
    [Symbol(asyncId)]: 22,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      [Symbol(owner)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: false,
  _dumped: false,
  req: ClientRequest {
    _events: [Object: null prototype] {
      finish: [Function: onfinish],
      error: [Array],
      abort: [Array],
      close: [Array],
      complete: [Function: onfinish],
      request: [Function: onrequest],
      aborted: [Function: onclose],
      end: [Function: onend],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 9,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      _peername: [Object],
      [Symbol(asyncId)]: 22,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      _peername: [Object],
      [Symbol(asyncId)]: 22,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'POST /preview HTTP/1.1\r\n' +
      'user-agent: got (https://github.com/sindresorhus/got)\r\n' +
      'content-type: application/json\r\n' +
      'content-length: 1271\r\n' +
      'accept-encoding: gzip, deflate, br\r\n' +
      'Host: 192.168.44.25:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'POST',
    insecureHTTPParser: undefined,
    path: '/preview',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 5,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: 'http://192.168.44.25:3000/preview',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      timings: [Object],
      emit: [Function],
      requestUrl: 'http://192.168.44.25:3000/preview',
      retryCount: 0,
      redirectUrls: [],
      request: [Object],
      isFromCache: false,
      ip: '192.168.44.25',
      [Symbol(kCapture)]: false
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    timings: {
      start: 1588079306722,
      socket: 1588079306730,
      lookup: 1588079306735,
      connect: 1588079306735,
      secureConnect: undefined,
      upload: 1588079306743,
      response: 1588079306745,
      end: 1588079306749,
      error: undefined,
      abort: undefined,
      phases: [Object]
    },
    emit: [Function],
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'user-agent': [Array],
      'content-type': [Array],
      'content-length': [Array],
      'accept-encoding': [Array],
      host: [Array]
    },
    [Symbol(reentry)]: true
  },
  timings: {
    start: 1588079306722,
    socket: 1588079306730,
    lookup: 1588079306735,
    connect: 1588079306735,
    secureConnect: undefined,
    upload: 1588079306743,
    response: 1588079306745,
    end: 1588079306749,
    error: undefined,
    abort: undefined,
    phases: {
      wait: 8,
      dns: 5,
      tcp: 0,
      tls: undefined,
      request: 8,
      firstByte: 2,
      download: 4,
      total: 27
    }
  },
  requestUrl: 'http://192.168.44.25:3000/preview',
  retryCount: 0,
  redirectUrls: [],
  request: {
    options: {
      headers: [Object],
      prefixUrl: [Getter/Setter],
      hooks: [Object],
      timeout: {},
      retry: [Object],
      method: 'POST',
      maxRedirects: 10,
      decompress: true,
      isStream: false,
      throwHttpErrors: true,
      ignoreInvalidCookies: false,
      cache: false,
      responseType: 'text',
      resolveBodyOnly: false,
      followRedirect: true,
      dnsCache: false,
      useElectronNet: false,
      methodRewriting: true,
      allowGetBody: false,
      _pagination: [Object],
      url: [URL]
    }
  },
  isFromCache: false,
  ip: '192.168.44.25',
  setTimeout: [Function: bound setTimeout],
  body: '{\n' +
    '  "preview": "<p><div data-page=\\"0\\"></p>\\n<p>Start with header for global options:</p>\\n<pre><code>{NumberQuestions:true}\\n-----------</code></pre><p><div data-question=\\"1\\" data-kind=\\"multichoice\\"></p>\\n<h3 id=\\"1-multiple-choice-question-check-all-that-apply\\">1. Multiple Choice Question (Check all that apply)</h3>\\n<p>A <em>description</em> for question.<br>Questions are created with headers (level 3) <code>### Multiple Choice Question (Check all that apply)</code>.</p>\\n<p>\\n<ul>\\n  <li>\\n    <div class=\\"controls\\">\\n      <label class=\\"checkbox\\">Choice A\\n        <input type=\\"checkbox\\" name=\\"#{choice.name}\\" value=\\"#{choice.value}\\"/>\\n      </label>\\n    </div>\\n  </li>\\n  <li>\\n    <div class=\\"controls\\">\\n      <label class=\\"checkbox\\">Choice B\\n        <input type=\\"checkbox\\" name=\\"#{choice.name}\\" value=\\"#{choice.value}\\"/>\\n      </label>\\n    </div>\\n  </li>\\n  <li>\\n    <div class=\\"controls\\">\\n      <label class=\\"checkbox\\">Choice C\\n        <input type=\\"checkbox\\" name=\\"#{choice.name}\\" value=\\"#{choice.value}\\"/>\\n      </label>\\n    </div>\\n  </li>\\n</ul>\\n</div>\\n<div data-question=\\"2\\" data-kind=\\"singlechoice\\"></p>\\n<h3 id=\\"2-single-choice-question\\">2. Single Choice Question</h3>\\n<p>Markdown is great for including questions about code snippets:</p>\\n<pre><code>$(document).ready( function()\\n{\\n    ko.applyBindings(new TaskViewModel());\\n    var converter = new Markdown.Converter();\\n    document.write(converter.makeHtml(&quot;**I am bold**&quot;));\\n});</code></pre><p>\\n<ol>\\n  <li>\\n    <div class=\\"controls\\">\\n      <label class=\\"radio\\">Choice\\n        <input type=\\"radio\\" name=\\"#{choice.name}\\" value=\\"#{choice.value}\\"/>\\n      </label>\\n    </div>\\n  </li>\\n  <li>\\n    <div class=\\"controls\\">\\n      <label class=\\"radio\\">Choice\\n        <input type=\\"radio\\" name=\\"#{choice.name}\\" value=\\"#{choice.value}\\"/>\\n      </label>\\n    </div>\\n  </li>\\n  <li>\\n    <div class=\\"controls\\">\\n      <label class=\\"radio\\">Choice\\n        <input type=\\"radio\\" name=\\"#{choice.name}\\" value=\\"#{choice.value}\\"/>\\n      </label>\\n    </div>\\n  </li>\\n</ol>\\n</div>\\n<div data-question=\\"3\\" data-kind=\\"singlechoicetable\\"></p>\\n<h3 id=\\"3-rankingrating-table\\">3. Ranking/Rating Table</h3>\\n<p>The first column has the description.  <a href=\\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-tables\\">Use github flavored markdown for table formatting</a>.</p>\\n<p>\\n<table class=\\"questionTable table-bordered table-condensed\\">\\n  <thead>\\n    <tr>\\n      <th></th>\\n      <th>Do not Want</th>\\n      <th>Sometimes</th>\\n      <th>Always</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <td>Search terms used in IDE</td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n    </tr>\\n    <tr>\\n      <td>Code that did not work out and was deleted.</td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n    </tr>\\n    <tr>\\n      <td>Time spent on particular edits</td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n    </tr>\\n    <tr>\\n      <td>Code and files viewed</td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n      <td>\\n        <div class=\\"surveycell\\">\\n          <label class=\\"radio\\">\\n            <input type=\\"radio\\" value=\\"#{c}\\" name=\\"#{table}_#{r}\\"/>\\n          </label>\\n        </div>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div></p>\\n"\n' +
    '}',
  [Symbol(kCapture)]: false
}